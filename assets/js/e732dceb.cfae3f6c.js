"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7930],{71412:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>a,frontMatter:()=>s,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"api-reference/core/widget","title":"Widget","description":"A widget is a UI component that can interact with deck.gl\'s layers and views.","source":"@site/../docs/api-reference/core/widget.md","sourceDirName":"api-reference/core","slug":"/api-reference/core/widget","permalink":"/docs/api-reference/core/widget","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/widget.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AttributeManager","permalink":"/docs/api-reference/core/attribute-manager"},"next":{"title":"Layer Catalog Overview","permalink":"/docs/api-reference/layers/"}}');var t=n(74848),c=n(28453);const s={},l="Widget",r={},o=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"<code>WidgetProps</code> (object)",id:"widgetprops",level:3},{value:"<code>id</code> (string, optional)",id:"id",level:4},{value:"<code>style</code> (object, optional)",id:"style",level:4},{value:"<code>className</code> (string, optional)",id:"classname",level:4},{value:"Additional <code>WidgetProps</code> on UI Widgets",id:"additional-widgetprops-on-ui-widgets",level:3},{value:"<code>viewId</code> (string | null)",id:"viewid",level:4},{value:"<code>placement</code> (string, optional)",id:"placement",level:4},{value:"Methods for Widget Writers",id:"methods-for-widget-writers",level:3},{value:"<code>constructor</code>",id:"constructor",level:4},{value:"<code>setProps</code>",id:"setprops",level:4},{value:"<code>updateHTML</code>",id:"updatehtml",level:4},{value:"<code>onRenderHTML</code>",id:"onrenderhtml",level:4},{value:"<code>onAdd</code>",id:"onadd",level:4},{value:"<code>onRemove</code>",id:"onremove",level:4},{value:"<code>onViewportChange</code>",id:"onviewportchange",level:4},{value:"<code>onRedraw</code>",id:"onredraw",level:4},{value:"<code>onHover</code>",id:"onhover",level:4},{value:"<code>onClick</code>",id:"onclick",level:4},{value:"<code>onDragStart</code>",id:"ondragstart",level:4},{value:"<code>onDrag</code>",id:"ondrag",level:4},{value:"<code>onDragEnd</code>",id:"ondragend",level:4}];function h(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"widget",children:"Widget"})}),"\n",(0,t.jsxs)(i.p,{children:["A widget is a UI component that can interact with deck.gl's layers and views.\nYou can write your own widgets, or use any of the many ready-to-use widgets in the ",(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/overview",children:(0,t.jsx)(i.code,{children:"@deck.gl/widgets"})})," module."]}),"\n",(0,t.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"Widget"})," class is a base class used to define new widgets and should not be instantiated directly by an application. See the ",(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/overview",children:"Widget Documentation"})," for information about how to write your own widgets."]}),"\n",(0,t.jsx)(i.h2,{id:"types",children:"Types"}),"\n",(0,t.jsxs)(i.h3,{id:"widgetprops",children:[(0,t.jsx)(i.code,{children:"WidgetProps"})," (object)"]}),"\n",(0,t.jsxs)(i.p,{children:["Options for the widget, as passed into the constructor and can be updated with ",(0,t.jsx)(i.code,{children:"setProps"}),"."]}),"\n",(0,t.jsxs)(i.h4,{id:"id",children:[(0,t.jsx)(i.code,{children:"id"})," (string, optional)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Default: the widget's name."}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"id"})," string must be unique among all your widgets at a given time. While a default ",(0,t.jsx)(i.code,{children:"id"})," is provided, it is recommended to set ",(0,t.jsx)(i.code,{children:"id"})," explicitly if you have multiple widgets of the same type."]}),"\n",(0,t.jsx)(i.p,{children:"Remarks:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"id"})," is used to match widgets between rendering calls. deck.gl requires each widget to have a unique ",(0,t.jsx)(i.code,{children:"id"}),". A default ",(0,t.jsx)(i.code,{children:"id"})," is assigned based on widget type, which means if you are using more than one widget of the same type (e.g. two ",(0,t.jsx)(i.code,{children:"InfoWidget"}),"s) you need to provide a custom ",(0,t.jsx)(i.code,{children:"id"})," for at least one of them."]}),"\n"]}),"\n",(0,t.jsxs)(i.h4,{id:"style",children:[(0,t.jsx)(i.code,{children:"style"})," (object, optional)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Default: ",(0,t.jsx)(i.code,{children:"{}"})]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Additional inline CSS styles on the top HTML element of the widget. camelCase CSS properties (e.g. ",(0,t.jsx)(i.code,{children:"backgroundColor"}),") and kebab-case CSS variables are accepted (e.g. ",(0,t.jsx)(i.code,{children:"--button-size"}),")."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"  style?: Partial<CSSStyleDeclaration>;\n"})}),"\n",(0,t.jsxs)(i.h4,{id:"classname",children:[(0,t.jsx)(i.code,{children:"className"})," (string, optional)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Default: ",(0,t.jsx)(i.code,{children:"''"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Additional CSS classnames on the top HTML element."}),"\n",(0,t.jsxs)(i.h3,{id:"additional-widgetprops-on-ui-widgets",children:["Additional ",(0,t.jsx)(i.code,{children:"WidgetProps"})," on UI Widgets"]}),"\n",(0,t.jsxs)(i.h4,{id:"viewid",children:[(0,t.jsx)(i.code,{children:"viewId"})," (string | null)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Default: ",(0,t.jsx)(i.code,{children:"null"})]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"viewId"})," prop controls how a widget interacts with views. If ",(0,t.jsx)(i.code,{children:"viewId"})," is defined, the widget is placed in that view and interacts exclusively with it; otherwise, it is placed in the root widget container and affects all views."]}),"\n",(0,t.jsxs)(i.p,{children:["When a widget instance is added to Deck, the user can optionally specify a ",(0,t.jsx)(i.code,{children:"viewId"})," that it is attached to (default ",(0,t.jsx)(i.code,{children:"null"}),"). If assigned, this widget will only respond to events occurred inside the specific view that matches this id."]}),"\n",(0,t.jsxs)(i.p,{children:["The id of the view that the widget is attached to. If ",(0,t.jsx)(i.code,{children:"null"}),", the widget receives events from all views. Otherwise, it only receives events from the view that matches this id."]}),"\n",(0,t.jsxs)(i.h4,{id:"placement",children:[(0,t.jsx)(i.code,{children:"placement"})," (string, optional)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Default: ",(0,t.jsx)(i.code,{children:"'top-left'"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Widget position within the view relative to the map container."}),"\n",(0,t.jsx)(i.p,{children:"Widget positioning within the view. One of:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"'top-left'"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"'top-right'"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"'bottom-left'"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"'bottom-right'"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"'fill'"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"methods-for-widget-writers",children:"Methods for Widget Writers"}),"\n",(0,t.jsx)(i.h4,{id:"constructor",children:(0,t.jsx)(i.code,{children:"constructor"})}),"\n",(0,t.jsx)(i.p,{children:"Supply the props and default props to the base class."}),"\n",(0,t.jsx)(i.h4,{id:"setprops",children:(0,t.jsx)(i.code,{children:"setProps"})}),"\n",(0,t.jsx)(i.p,{children:"Called to update widget options."}),"\n",(0,t.jsx)(i.h4,{id:"updatehtml",children:(0,t.jsx)(i.code,{children:"updateHTML"})}),"\n",(0,t.jsxs)(i.p,{children:["Updates the widget. Called by the specific widget when state has changed. Calls ",(0,t.jsx)(i.code,{children:"onRenderHTML()"})]}),"\n",(0,t.jsx)(i.h4,{id:"onrenderhtml",children:(0,t.jsx)(i.code,{children:"onRenderHTML"})}),"\n",(0,t.jsx)(i.p,{children:"This function is implemented by the specific widget subclass to update the HTML for the widget"}),"\n",(0,t.jsx)(i.h4,{id:"onadd",children:(0,t.jsx)(i.code,{children:"onAdd"})}),"\n",(0,t.jsx)(i.p,{children:"Required. Called when the widget is added to a Deck instance."}),"\n",(0,t.jsx)(i.p,{children:"Receives the following arguments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"context"})," (object)","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"deck"})," (Deck) - the Deck instance that this widget is being attached to."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"viewId"})," (string | null) - the view id that this widget is being attached to."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Returns an optional UI element that should be appended to the Deck container."}),"\n",(0,t.jsx)(i.h4,{id:"onremove",children:(0,t.jsx)(i.code,{children:"onRemove"})}),"\n",(0,t.jsx)(i.p,{children:"Optional. Called when the widget is removed."}),"\n",(0,t.jsx)(i.h4,{id:"onviewportchange",children:(0,t.jsx)(i.code,{children:"onViewportChange"})}),"\n",(0,t.jsxs)(i.p,{children:["Op\u2020ional. Called when the containing view is changed. If ",(0,t.jsx)(i.code,{children:"viewId: null"}),", will be called if any viewport changes."]}),"\n",(0,t.jsx)(i.p,{children:"Receives the following arguments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"viewport"})," (Viewport) - the viewport that has changed"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"onredraw",children:(0,t.jsx)(i.code,{children:"onRedraw"})}),"\n",(0,t.jsxs)(i.p,{children:["Optional. Called when the containing view is redrawn. If ",(0,t.jsx)(i.code,{children:"viewId: null"}),", will be called if anything redraws."]}),"\n",(0,t.jsx)(i.p,{children:"Receives the following arguments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"params"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"viewports"})," (Viewport[]) - the viewports that are being redrawn"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"layers"})," (Layer[]) - the layers that are being redrawn"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"onhover",children:(0,t.jsx)(i.code,{children:"onHover"})}),"\n",(0,t.jsxs)(i.p,{children:["Optional. Called when a hover event occurs in the containing view. If ",(0,t.jsx)(i.code,{children:"viewId: null"}),", will be called if hover occurs in any view."]}),"\n",(0,t.jsx)(i.p,{children:"Receives arguments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"info"})," - the ",(0,t.jsx)(i.a,{href:"/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being hovered."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"event"})," - the original gesture event"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"onclick",children:(0,t.jsx)(i.code,{children:"onClick"})}),"\n",(0,t.jsxs)(i.p,{children:["Optional. Called when a click event occurs in the containing view. If ",(0,t.jsx)(i.code,{children:"viewId: null"}),", will be called if click occurs in any view."]}),"\n",(0,t.jsx)(i.p,{children:"Receives arguments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"info"})," - the ",(0,t.jsx)(i.a,{href:"/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being clicked."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"event"})," - the original gesture event"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ondragstart",children:(0,t.jsx)(i.code,{children:"onDragStart"})}),"\n",(0,t.jsxs)(i.p,{children:["Optional. Called when a dragstart event occurs in the containing view. If ",(0,t.jsx)(i.code,{children:"viewId: null"}),", will be called if drag occurs in any view."]}),"\n",(0,t.jsx)(i.p,{children:"Receives arguments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"info"})," - the ",(0,t.jsx)(i.a,{href:"/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being dragged."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"event"})," - the original gesture event"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ondrag",children:(0,t.jsx)(i.code,{children:"onDrag"})}),"\n",(0,t.jsxs)(i.p,{children:["Optional. Called when a drag event occurs in the containing view. If ",(0,t.jsx)(i.code,{children:"viewId: null"}),", will be called if drag occurs in any view."]}),"\n",(0,t.jsx)(i.p,{children:"Receives arguments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"info"})," - the ",(0,t.jsx)(i.a,{href:"/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being dragged."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"event"})," - the original gesture event"]}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"ondragend",children:(0,t.jsx)(i.code,{children:"onDragEnd"})}),"\n",(0,t.jsxs)(i.p,{children:["Optional. Called when a dragend event occurs in the containing view. If ",(0,t.jsx)(i.code,{children:"viewId: null"}),", will be called if drag occurs in any view."]}),"\n",(0,t.jsx)(i.p,{children:"Receives arguments:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"info"})," - the ",(0,t.jsx)(i.a,{href:"/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being dragged."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"event"})," - the original gesture event"]}),"\n"]})]})}function a(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>l});var d=n(96540);const t={},c=d.createContext(t);function s(e){const i=d.useContext(c);return d.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),d.createElement(c.Provider,{value:i},e.children)}}}]);