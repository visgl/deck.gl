"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[274],{11732:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"developer-guide/custom-layers/README","title":"Writing Your Own Layer","description":"Preparations","source":"@site/../docs/developer-guide/custom-layers/README.md","sourceDirName":"developer-guide/custom-layers","slug":"/developer-guide/custom-layers/","permalink":"/docs/developer-guide/custom-layers/","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/developer-guide/custom-layers/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using with MapLibre","permalink":"/docs/developer-guide/base-maps/using-with-maplibre"},"next":{"title":"Layer Attributes","permalink":"/docs/developer-guide/custom-layers/layer-attributes"}}');var n=s(74848),t=s(28453);const i={},o="Writing Your Own Layer",l={},c=[{value:"Preparations",id:"preparations",level:2},{value:"Creating The Layer class",id:"creating-the-layer-class",level:2},{value:"Naming Your Layer",id:"naming-your-layer",level:3},{value:"Defining Layer Properties",id:"defining-layer-properties",level:3}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"writing-your-own-layer",children:"Writing Your Own Layer"})}),"\n",(0,n.jsx)(r.h2,{id:"preparations",children:"Preparations"}),"\n",(0,n.jsx)(r.p,{children:"Before creating a new layer, it is recommended that you verify that you can not achieve the desired effect either through layer subclassing or through using composite layers."}),"\n",(0,n.jsx)(r.p,{children:"There are a couple of ways to build a layer in deck.gl, and it is helpful to consider what approach will serve you best before starting:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/docs/developer-guide/custom-layers/composite-layers",children:"Create a composite layer"})}),' - A composite layer is a special kind of layer that creates other layers. This allows you to build e.g. a "semantic layer" - a layer that presents a different interface (set of props) than an existing layer, transforms those props into a format that fits and existing layer, etc.']}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/docs/developer-guide/custom-layers/subclassed-layers",children:"Subclass a layer"})})," - Subclassed layer is a new layer created by subclassing another layers. This allows the developer to reuse all of the interfaces and implementations of an existing layer unless they are explicitly overridden."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/docs/developer-guide/custom-layers/primitive-layers",children:"Implement a layer from scratch"})})," - If you want to draw something completely different and you are comfortable with WebGL2/WebGPU and shader programming, this option gives you the most flexibility. You have full control of the layer lifecycle, you can manage your own model(s) and directly manipulate the WebGL2/WebGPU context."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"creating-the-layer-class",children:"Creating The Layer class"}),"\n",(0,n.jsxs)(r.p,{children:["Your layer class must be a subclass of ",(0,n.jsx)(r.a,{href:"/docs/api-reference/core/layer",children:"Layer"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"import {Layer} from 'deck.gl';\n\nclass AwesomeLayer extends Layer {...}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["It can be a direct subclass of ",(0,n.jsx)(r.code,{children:"Layer"}),", or extend another layer."]}),"\n",(0,n.jsx)(r.h3,{id:"naming-your-layer",children:"Naming Your Layer"}),"\n",(0,n.jsxs)(r.p,{children:["Store the layer name in the ",(0,n.jsx)(r.code,{children:"layerName"})," static property on your ",(0,n.jsx)(r.code,{children:"Layer"})," subclass:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"AwesomeLayer.layerName = 'AwesomeLayer';\n"})}),"\n",(0,n.jsx)(r.p,{children:"The layer name will be used as the default id of layer instances and also during\ndebugging."}),"\n",(0,n.jsx)(r.h3,{id:"defining-layer-properties",children:"Defining Layer Properties"}),"\n",(0,n.jsx)(r.p,{children:"The list of properties is the main API your new layer will provide to\napplications. So it makes sense to carefully consider what properties\nyour layer should offer."}),"\n",(0,n.jsx)(r.p,{children:"You also need to define the default values of the layer's properties."}),"\n",(0,n.jsxs)(r.p,{children:["The most efficient method of doing this is to define a static ",(0,n.jsx)(r.code,{children:"defaultProps"}),"\nmember on your layer class."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-js",children:"AwesomeLayer.defaultProps = {\n  color: [255, 0, 0],\n  opacity: 0.5\n};\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Also consider the properties of the base ",(0,n.jsx)(r.a,{href:"/docs/api-reference/core/layer",children:"Layer"})," class,\nas well as any other inherited properties if you are deriving."]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>o});var a=s(96540);const n={},t=a.createContext(n);function i(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);