"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[1800],{68607:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"api-reference/carto/data-sources","title":"Data Sources","description":"To ease interacting with the CARTO platform, the CARTO deck.gl module includes a number of functions, which simplify the use of fetching your data from CARTO. At a high level these can be thought of as wrappers around the browsers fetch function, except that rather than passing a URL, options that specify the data in the CARTO are used.","source":"@site/../docs/api-reference/carto/data-sources.md","sourceDirName":"api-reference/carto","slug":"/api-reference/carto/data-sources","permalink":"/docs/api-reference/carto/data-sources","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/carto/data-sources.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fetchMap","permalink":"/docs/api-reference/carto/fetch-map"},"next":{"title":"ClusterTileLayer","permalink":"/docs/api-reference/carto/cluster-tile-layer"}}');var s=n(74848),t=n(28453);const c={},o="Data Sources",i={},l=[{value:"Overview",id:"overview",level:3},{value:"Promise API",id:"promise-api",level:3},{value:"Types",id:"types",level:3},{value:"Caching",id:"caching",level:3},{value:"Available Data Sources",id:"available-data-sources",level:3},{value:"vectorTableSource",id:"vectortablesource",level:4},{value:"vectorQuerySource",id:"vectorquerysource",level:4},{value:"vectorTilesetSource",id:"vectortilesetsource",level:4},{value:"h3TableSource",id:"h3tablesource",level:4},{value:"h3QuerySource",id:"h3querysource",level:4},{value:"h3TilesetSource",id:"h3tilesetsource",level:4},{value:"quadbinTableSource",id:"quadbintablesource",level:4},{value:"quadbinQuerySource",id:"quadbinquerysource",level:4},{value:"quadbinTilesetSource",id:"quadbintilesetsource",level:4},{value:"rasterSource",id:"rastersource",level:4},{value:"boundaryTableSource",id:"boundarytablesource",level:4},{value:"boundaryQuerySource",id:"boundaryquerysource",level:4},{value:"QueryParameters",id:"queryparameters",level:3}];function u(e){const r={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"data-sources",children:"Data Sources"})}),"\n",(0,s.jsxs)(r.p,{children:["To ease interacting with the CARTO platform, the CARTO deck.gl module includes a number of functions, which simplify the use of fetching your data from CARTO. At a high level these can be thought of as wrappers around the browsers ",(0,s.jsx)(r.code,{children:"fetch"})," function, except that rather than passing a URL, options that specify the data in the CARTO are used."]}),"\n",(0,s.jsx)(r.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(r.p,{children:["The data source functions are a compact way to describe the data that you want to fetch. For example, to fetch a table from a data warehouse from the connection ",(0,s.jsx)(r.code,{children:"carto_dw"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import {vectorTableSource} from '@carto/api-client';\nconst data = vectorTableSource({\n  accessToken: 'XXX',\n  connectionName: 'carto_dw',\n  tableName: 'carto-demo-data.demo_tables.chicago_crime_sample'\n});\n"})}),"\n",(0,s.jsx)(r.h3,{id:"promise-api",children:"Promise API"}),"\n",(0,s.jsxs)(r.p,{children:["All data source functions return a Promise, which can be resolved to obtain the actual Tilejson. However, as the ",(0,s.jsx)(r.a,{href:"../core/layer#data",children:"core deck.gl Layer prop supports Promises"}),", it is often not necessary to resolve or await the Promise and the data source can be directly passed to the data prop:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"import {H3TileLayer} from '@deck.gl/carto';\nimport {h3TilesetSource} from '@carto/api-client';\nnew H3TileLayer({\n  data: h3TilesetSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tables.h3_data'\n  }),\n\n  getFillColor: d => d.properties.color\n});\n"})}),"\n",(0,s.jsx)(r.h3,{id:"types",children:"Types"}),"\n",(0,s.jsx)(r.p,{children:"All the data source functions are fully typed, to aid in providing the correct parameters and working correctly with the return value."}),"\n",(0,s.jsx)(r.h3,{id:"caching",children:"Caching"}),"\n",(0,s.jsxs)(r.p,{children:["The dataSource functions have an internal cache, which avoids fetching data from the server if the parameters have not changed. Thus they can be used, for example, in React ",(0,s.jsx)(r.code,{children:"render()"})," functions without needing memoization."]}),"\n",(0,s.jsx)(r.h3,{id:"available-data-sources",children:"Available Data Sources"}),"\n",(0,s.jsx)(r.p,{children:"All data source functions take the following global options:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type SourceOptions = {\n  accessToken: string;\n  connectionName: string;\n  apiBaseUrl?: string;\n  clientId?: string;\n  headers?: Record<string, string>;\n  maxLengthURL?: number;\n};\n"})}),"\n",(0,s.jsx)(r.p,{children:"In addition, the following options are supported on each source:"}),"\n",(0,s.jsx)(r.h4,{id:"vectortablesource",children:"vectorTableSource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type VectorTableSourceOptions = {\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n  aggregationExp?: string;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"vectorquerysource",children:"vectorQuerySource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type VectorQuerySourceOptions = {\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n  aggregationExp?: string;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"vectortilesetsource",children:"vectorTilesetSource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type VectorTilesetSourceOptions = {\n  tableName: string;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"h3tablesource",children:"h3TableSource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type H3TableSourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"h3querysource",children:"h3QuerySource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type H3QuerySourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"h3tilesetsource",children:"h3TilesetSource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type H3TilesetSourceOptions = {\n  tableName: string;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"quadbintablesource",children:"quadbinTableSource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type QuadbinTableSourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"quadbinquerysource",children:"quadbinQuerySource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type QuadbinQuerySourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"quadbintilesetsource",children:"quadbinTilesetSource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type QuadbinTilesetSourceOptions = {\n  tableName: string;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"rastersource",children:"rasterSource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type RasterSourceOptions = {\n  tableName: string;\n};\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Boundary sources are sources where both the tileset and the properties props need a specific schema to work. ",(0,s.jsx)(r.a,{href:"https://docs.carto.com/carto-for-developers/guides/use-boundaries-in-your-application",children:"Read more about Boundaries in the CARTO documentation"}),"."]}),"\n",(0,s.jsx)(r.h4,{id:"boundarytablesource",children:"boundaryTableSource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type BoundaryTableSourceOptions = {\n  tilesetTableName: string;\n  columns?: string[];\n  propertiesTableName: string;\n};\n"})}),"\n",(0,s.jsx)(r.h4,{id:"boundaryquerysource",children:"boundaryQuerySource"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type BoundaryQuerySourceOptions = {\n  tilesetTableName: string;\n  propertiesSqlQuery: string;\n  queryParameters?: QueryParameters;\n};\n"})}),"\n",(0,s.jsx)(r.h3,{id:"queryparameters",children:"QueryParameters"}),"\n",(0,s.jsx)(r.p,{children:"QueryParameters are used to parametrize SQL queries. The format depends on the source's provider, some examples:"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.a,{href:"https://node-postgres.com/features/queries",children:"PostgreSQL and Redshift"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=$1`,\n  queryParameters: ['my-name']\n})\n"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.a,{href:"https://cloud.google.com/bigquery/docs/parameterized-queries#node.js",children:"BigQuery positional"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=$1`,\n  queryParameters: ['my-name']\n})\n"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.a,{href:"https://cloud.google.com/bigquery/docs/parameterized-queries#node.js",children:"BigQuery named parameters"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=@username`,\n  queryParameters: { username: 'my-name' }\n})\n"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.a,{href:"https://docs.snowflake.com/en/user-guide/nodejs-driver-use.html#binding-statement-parameters",children:"Snowflake positional"})," :"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=?`,\n  queryParameters: ['my-name']\n});\n"})}),"\n",(0,s.jsx)(r.p,{children:"or"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"vectorQuerySource({\n  data: `select * from users where username=:1`,\n  queryParameters: ['my-name']\n});\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://github.com/markdirish/node-odbc#bindparameters-callback",children:"Databricks ODBC"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"vectorQuerySource({\n  ...\n  data: `select * from users where username=?`,\n  queryParameters: ['my-name']\n});\n"})})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>o});var a=n(96540);const s={},t=a.createContext(s);function c(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);