"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9396],{31760:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"api-reference/aggregation-layers/webgl-aggregator","title":"WebGLAggregator","description":"The WebGLAggregator implements the Aggregator interface by performing aggregation on the GPU.","source":"@site/../docs/api-reference/aggregation-layers/webgl-aggregator.md","sourceDirName":"api-reference/aggregation-layers","slug":"/api-reference/aggregation-layers/webgl-aggregator","permalink":"/docs/api-reference/aggregation-layers/webgl-aggregator","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/aggregation-layers/webgl-aggregator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CPUAggregator","permalink":"/docs/api-reference/aggregation-layers/cpu-aggregator"},"next":{"title":"DeckGL (Scripting Interface)","permalink":"/docs/api-reference/core/deckgl"}}');var o=r(74848),i=r(28453);const s={},a="WebGLAggregator",l={},g=[{value:"Example",id:"example",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Props",id:"props",level:2},{value:"<code>binIdRange</code> (number[][])",id:"binidrange",level:4},{value:"<code>moduleSettings</code> (object)",id:"modulesettings",level:4},{value:"Source",id:"source",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"webglaggregator",children:"WebGLAggregator"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"WebGLAggregator"})," implements the ",(0,o.jsx)(n.a,{href:"/docs/api-reference/aggregation-layers/aggregator",children:"Aggregator"})," interface by performing aggregation on the GPU."]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["This example implements an aggregator that makes a ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Histogram",children:"histogram"}),' that calculates "weight" distribution by "position".']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import {WebGLAggregator} from '@deck.gl/aggregation-layers';\n\nconst aggregator = new WebGLAggregator(device, {\n  dimensions: 1,\n  channelCount: 1,\n  bufferLayout: [\n    {name: 'position', format: 'float32'},\n    {name: 'weight', format: 'float32'}\n  ],\n  vs: `\n    uniform float binSize;\n    in float position;\n    in float weight;\n    void getBin(out int binId) {\n      binId = int(floor(position / binSize));\n    }\n    void getValue(out float value) {\n      value = weight;\n    }`\n});\n\nconst position = new Attribute(device, {id: 'position', size: 1});\nposition.setData({value: new Float32Array(...)});\nconst weight = new Attribute(device, {id: 'weight', size: 1});\nposition.setData({value: new Float32Array(...)});\n\naggregator.setProps({\n  pointCount: data.length,\n  binIdRange: [0, 100],\n  operations: ['SUM'],\n  binOptions: {\n    binSize: 1\n  },\n  attributes: {position, weight}\n});\n\naggregator.update();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"new WebGLAggregator(props);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Arguments:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dimensions"})," (number) - size of bin IDs, either 1 or 2"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"channelCount"})," (number) - number of channels, up to 3"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"vs"})," (string) - vertex shader for the aggregator. Should define the following functions:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"void getBin(out int binId)"}),", if dimensions=1 or\n",(0,o.jsx)(n.code,{children:"void getBin(out ivec2 binId)"}),", if dimensions=2"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"void getValue(out float value)"}),", if channelCount=1 or\n",(0,o.jsx)(n.code,{children:"void getValue(out vec2 value)"}),", if channelCount=2 or\n",(0,o.jsx)(n.code,{children:"void getValue(out vec3 value)"}),", if channelCount=3"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bufferLayout"})," (object[]) - see ",(0,o.jsx)(n.a,{href:"https://github.com/visgl/luma.gl/blob/master/modules/engine/src/model/model.ts",children:"ModelProps"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"modules"})," (object[]) - luma.gl shader modules, see ",(0,o.jsx)(n.a,{href:"https://github.com/visgl/luma.gl/blob/master/modules/engine/src/model/model.ts",children:"ModelProps"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"defines"})," (object) - luma.gl shader defines, see ",(0,o.jsx)(n.a,{href:"https://github.com/visgl/luma.gl/blob/master/modules/engine/src/model/model.ts",children:"ModelProps"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,o.jsxs)(n.p,{children:["Requires all ",(0,o.jsx)(n.a,{href:"/docs/api-reference/aggregation-layers/aggregator#setprops",children:"Aggregator"})," props, and the following:"]}),"\n",(0,o.jsxs)(n.h4,{id:"binidrange",children:[(0,o.jsx)(n.code,{children:"binIdRange"})," (number[][])"]}),"\n",(0,o.jsxs)(n.p,{children:["Limits of binId defined as [start, end] for each dimension. Ids less than ",(0,o.jsx)(n.code,{children:"start"})," or larger than or equal to ",(0,o.jsx)(n.code,{children:"end"})," are ignored."]}),"\n",(0,o.jsxs)(n.h4,{id:"modulesettings",children:[(0,o.jsx)(n.code,{children:"moduleSettings"})," (object)"]}),"\n",(0,o.jsxs)(n.p,{children:["Mapped uniforms for shadertool modules, see ",(0,o.jsx)(n.a,{href:"https://github.com/visgl/luma.gl/blob/master/modules/engine/src/model/model.ts",children:"ModelProps"})]}),"\n",(0,o.jsx)(n.h2,{id:"source",children:"Source"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/visgl/deck.gl/tree/9.2-release/modules/aggregation-layers/src/common/aggregator/gpu-aggregator/webgl-aggregator.ts",children:"modules/aggregation-layers/src/common/aggregator/gpu-aggregator/webgl-aggregator.ts"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(96540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);