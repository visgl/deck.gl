"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4337],{64408:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api-reference/widgets/overview","title":"@deck.gl/widgets","description":"Widgets are UI components around the WebGL2/WebGPU canvas to offer controls and information for a better user experience.","source":"@site/../docs/api-reference/widgets/overview.md","sourceDirName":"api-reference/widgets","slug":"/api-reference/widgets/overview","permalink":"/docs/api-reference/widgets/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/widgets/overview.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SnapshotTestRunner","permalink":"/docs/api-reference/test-utils/snapshot-test-runner"},"next":{"title":"Styling Widgets","permalink":"/docs/api-reference/widgets/styling"}}');var t=n(74848),d=n(28453);const l={},r="@deck.gl/widgets",c={},o=[{value:"Navigation Widgets",id:"navigation-widgets",level:3},{value:"Geospatial Widgets",id:"geospatial-widgets",level:3},{value:"View Widgets",id:"view-widgets",level:3},{value:"Information Widgets",id:"information-widgets",level:3},{value:"Control Widgets",id:"control-widgets",level:3},{value:"Utility Widgets",id:"utility-widgets",level:3},{value:"Installation",id:"installation",level:2},{value:"Install from NPM",id:"install-from-npm",level:3},{value:"Include the Standalone Bundle",id:"include-the-standalone-bundle",level:3},{value:"Using Widgets",id:"using-widgets",level:2},{value:"Using with Multiple Views",id:"using-with-multiple-views",level:3},{value:"Writing new Widgets",id:"writing-new-widgets",level:2},{value:"Themes and Styling",id:"themes-and-styling",level:2}];function a(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"deckglwidgets",children:"@deck.gl/widgets"})}),"\n",(0,t.jsx)(i.p,{children:"Widgets are UI components around the WebGL2/WebGPU canvas to offer controls and information for a better user experience."}),"\n",(0,t.jsx)(i.p,{children:"This module contains the following widgets:"}),"\n",(0,t.jsx)(i.h3,{id:"navigation-widgets",children:"Navigation Widgets"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/gimbal-widget",children:"GimbalWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/reset-view-widget",children:"ResetViewWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/zoom-widget",children:"ZoomWidget"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"geospatial-widgets",children:"Geospatial Widgets"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/compass-widget",children:"CompassWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/geocoder-widget",children:"GeocoderWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/scale-widget",children:"ScaleWidget"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"view-widgets",children:"View Widgets"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/fullscreen-widget",children:"FullscreenWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/splitter-widget",children:"SplitterWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/view-selector-widget",children:"ViewSelectorWidget"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"information-widgets",children:"Information Widgets"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/context-menu-widget",children:"ContextMenuWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/info-widget",children:"InfoWidget"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"control-widgets",children:"Control Widgets"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/timeline-widget",children:"TimelineWidget"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"utility-widgets",children:"Utility Widgets"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/fps-widget",children:"FpsWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/loading-widget",children:"LoadingWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/screenshot-widget",children:"ScreenshotWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/stats-widget",children:"StatsWidget"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/docs/api-reference/widgets/theme-widget",children:"ThemeWidget"})}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(i.h3,{id:"install-from-npm",children:"Install from NPM"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"npm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/widgets\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:"import {FullscreenWidget} from '@deck.gl/widgets';\nimport '@deck.gl/widgets/stylesheet.css';\n\nnew FullscreenWidget();\n"})}),"\n",(0,t.jsx)(i.h3,{id:"include-the-standalone-bundle",children:"Include the Standalone Bundle"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-html",children:'<script src="https://unpkg.com/deck.gl@^9.0.0/dist.min.js"><\/script>\n<link href="https://unpkg.com/deck.gl@^9.0.0/dist/stylesheet.css" rel=\'stylesheet\' />\n\x3c!-- or --\x3e\n<script src="https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js"><\/script>\n<script src="https://unpkg.com/@deck.gl/widgets@^9.0.0/dist.min.js"><\/script>\n<link href="https://unpkg.com/@deck.gl/widgets@^9.0.0/dist/stylesheet.css" rel=\'stylesheet\' />\n'})}),"\n",(0,t.jsx)(i.h2,{id:"using-widgets",children:"Using Widgets"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"import {Deck} from '@deck.gl/core';\nimport {\n  CompassWidget,\n  ZoomWidget,\n  FullscreenWidget,\n  ScreenshotWidget,\n} from '@deck.gl/widgets';\nimport '@deck.gl/widgets/stylesheet.css';\n\nnew Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true,\n  layers: [\n    ...\n  ],\n  widgets: [\n    new ZoomWidget(),\n    new CompassWidget(),\n    new FullscreenWidget(),\n    new ScreenshotWidget()\n  ]\n});\n"})}),"\n",(0,t.jsx)(i.p,{children:"The built-in widgets support both dark and light color scheme changes and can be wired up to dynamically respond to color scheme changes like so:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"import {Deck} from '@deck.gl/core';\nimport {\n  CompassWidget,\n  ZoomWidget,\n  FullscreenWidget,\n  ScreenshotWidget,\n  DarkGlassTheme,\n  LightGlassTheme\n} from '@deck.gl/widgets';\nimport '@deck.gl/widgets/stylesheet.css';\n\n/* global window */\nconst prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');\nconst widgetTheme = prefersDarkScheme.matches ? DarkGlassTheme : LightGlassTheme;\n\nnew Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true,\n  layers: [ ... ],\n  widgets: [\n    new ZoomWidget({style: widgetTheme}),\n    new CompassWidget({style: widgetTheme}),\n    new FullscreenWidget({style: widgetTheme}),\n    new ScreenshotWidget({style: widgetTheme})\n  ]\n});\n"})}),"\n",(0,t.jsx)(i.h3,{id:"using-with-multiple-views",children:"Using with Multiple Views"}),"\n",(0,t.jsxs)(i.p,{children:["Widgets with UI (e.g. a button or panel) can be positioned relative to the deck.gl view they are controlling, via the ",(0,t.jsx)(i.code,{children:"viewId"})," and ",(0,t.jsx)(i.code,{children:"placement"})," props. See ",(0,t.jsx)(i.a,{href:"/docs/api-reference/core/widget#widgetprops",children:"WidgetProps"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"viewId"})," controls which HTML container will mount to, and the ",(0,t.jsx)(i.code,{children:"placement"})," prop will position it relative to the container it is in, like so:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"new Deck({\n  views:[\n    new MapView({id: 'left-map'}),\n    new MapView({id: 'right-map'})\n  ],\n  widgets: [\n    new FullscreenWidget({placement: 'top-right'}),\n    new ZoomWidget({viewId: 'left-map'}),\n    new GimbalWidget({viewId: 'right-map'}),\n  ]\n})\n"})}),"\n",(0,t.jsx)(i.p,{children:"This configuration will result in the following HTML structure:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-html",children:'\x3c!-- map container --\x3e\n<div class="deck-widget-container">\n  <canvas id="deckgl-overlay">\n  \x3c!-- size of full map container --\x3e\n  <div>\n    <div class="top-right">\n      </FullscreenWidget>\n    </div>\n  </div>\n  \x3c!-- size and position of the "left-map" view --\x3e\n  <div>\n    <div class="top-left">\n      </ZoomWidget>\n    </div>\n  </div>\n  \x3c!-- size and position of the "right-map" view --\x3e\n  <div>\n    <div class="top-left">\n      </GimbalWidget>\n    </div>\n  </div>\n</div>\n'})}),"\n",(0,t.jsx)(i.p,{children:"Remarks:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Widgets in the default container will be overlapped by view-specific widgets."}),"\n",(0,t.jsxs)(i.li,{children:["Widget UI with dynamic positioning, such as an ",(0,t.jsx)(i.code,{children:"InfoWidget"}),", may not expose the ",(0,t.jsx)(i.code,{children:"placement"})," prop as they control positioning internally."]}),"\n",(0,t.jsxs)(i.li,{children:["For more information about using multiple deck.gl views, see the ",(0,t.jsx)(i.a,{href:"/docs/developer-guide/views#using-multiple-views",children:"Using Multiple Views"})," guide."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"writing-new-widgets",children:"Writing new Widgets"}),"\n",(0,t.jsxs)(i.p,{children:["A widget should inherit the ",(0,t.jsx)(i.code,{children:"Widget"})," class.\nHere is a custom widget that shows a spinner while layers are loading:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"import {Deck, Widget} from '@deck.gl/core';\n\nclass LoadingIndicator extends Widget {\n  element?: HTMLDivElement;\n  size: number;\n\n  constructor(options: {\n    size: number;\n  }) {\n    this.size = options.size;\n  }\n\n  onRenderHTML(el: HTMLElement) {\n    el.className = 'spinner';\n    el.style.width = `${this.size}px`;\n    // TODO - create animation for .spinner in the CSS stylesheet\n  }\n\n  onRedraw({layers}) {\n    const isVisible = layers.some(layer => !layer.isLoaded);\n    this.rootElement.style.display = isVisible ? 'block' : 'none';\n  }\n}\n\nnew Deck({\n  widgets: [new LoadingIndicator({size: 48})]\n});\n"})}),"\n",(0,t.jsx)(i.h2,{id:"themes-and-styling",children:"Themes and Styling"}),"\n",(0,t.jsxs)(i.p,{children:["deck.gl widget appearance can be customized using ",(0,t.jsx)(i.a,{href:"./styling",children:"themes and CSS"}),"."]})]})}function g(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>r});var s=n(96540);const t={},d=s.createContext(t);function l(e){const i=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(d.Provider,{value:i},e.children)}}}]);