"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7258],{19041:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"api-reference/core/orthographic-controller","title":"OrthographicController","description":"Inherits from Base Controller.","source":"@site/../docs/api-reference/core/orthographic-controller.md","sourceDirName":"api-reference/core","slug":"/api-reference/core/orthographic-controller","permalink":"/docs/api-reference/core/orthographic-controller","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/orthographic-controller.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"FirstPersonController","permalink":"/docs/api-reference/core/first-person-controller"},"next":{"title":"OrbitController","permalink":"/docs/api-reference/core/orbit-controller"}}');var t=o(74848),c=o(28453);const l={},i="OrthographicController",s={},a=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"Custom OrthographicController",id:"custom-orthographiccontroller",level:2},{value:"Source",id:"source",level:2}];function h(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"orthographiccontroller",children:"OrthographicController"})}),"\n",(0,t.jsxs)(r.p,{children:["Inherits from ",(0,t.jsx)(r.a,{href:"/docs/api-reference/core/controller",children:"Base Controller"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"OrthographicController"})," class can be passed to either the ",(0,t.jsx)(r.code,{children:"Deck"})," class's ",(0,t.jsx)(r.a,{href:"/docs/api-reference/core/deck#controller",children:"controller"})," prop or a ",(0,t.jsx)(r.code,{children:"View"})," class's ",(0,t.jsx)(r.a,{href:"/docs/api-reference/core/view#controller",children:"controller"})," prop to specify that viewport interaction should be enabled."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"OrthographicController"})," is the default controller for ",(0,t.jsx)(r.a,{href:"/docs/api-reference/core/orthographic-view",children:"OrthographicView"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.p,{children:"Use with the default view:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"import {Deck, OrthographicView} from '@deck.gl/core';\n\nnew Deck({\n  views: new OrthographicView(),\n  controller: {scrollZoom: false, inertia: true},\n  initialViewState: viewState\n});\n"})}),"\n",(0,t.jsx)(r.p,{children:"is equivalent to:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"import {Deck, OrthographicView} from '@deck.gl/core';\n\nnew Deck({\n  views: new OrthographicView({\n    controller: {scrollZoom: false,  inertia: true}\n  }),\n  initialViewState: viewState\n})\n"})}),"\n",(0,t.jsx)(r.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(r.p,{children:["Supports all ",(0,t.jsx)(r.a,{href:"/docs/api-reference/core/controller#options",children:"Controller options"})," with the following default behavior:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"dragPan"}),": default ",(0,t.jsx)(r.code,{children:"'pan'"})," (drag to pan)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"dragRotate"}),": not effective, this view cannot be rotated"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"touchRotate"}),": not effective, this view cannot be rotated"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"keyboard"}),": arrow keys to pan, +/- to zoom"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Also accepts additional options:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"zoomAxis"})," (string) - which axes to apply zoom to. Affects scroll, keyboard +/- and double tap. One of ",(0,t.jsx)(r.code,{children:"X"})," (zoom along the X axis only), ",(0,t.jsx)(r.code,{children:"Y"})," (zoom along the Y axis only), ",(0,t.jsx)(r.code,{children:"all"}),". Default ",(0,t.jsx)(r.code,{children:"all"}),". If this option is set to ",(0,t.jsx)(r.code,{children:"X"})," or ",(0,t.jsx)(r.code,{children:"Y"}),", ",(0,t.jsx)(r.code,{children:"viewState.zoom"})," must be an array to enable independent zoom for each axis."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"custom-orthographiccontroller",children:"Custom OrthographicController"}),"\n",(0,t.jsxs)(r.p,{children:["You can further customize the ",(0,t.jsx)(r.code,{children:"OrthographicController"}),"'s behavior by extending the class:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"import {Deck, OrthographicView, OrthographicController} from '@deck.gl/core';\n\nclass MyOrthographicController extends OrthographicController {\n\n  handleEvent(event) {\n    if (event.type === 'pan') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\nnew Deck({\n  views: new OrthographicView(),\n  controller: {type: MyOrthographicController},\n  initialViewState: viewState\n})\n"})}),"\n",(0,t.jsxs)(r.p,{children:["See the ",(0,t.jsx)(r.code,{children:"Controller"})," class ",(0,t.jsx)(r.a,{href:"/docs/api-reference/core/controller#methods",children:"documentation"})," for the methods that you can use and/or override."]}),"\n",(0,t.jsx)(r.h2,{id:"source",children:"Source"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/visgl/deck.gl/tree/9.2-release/modules/core/src/controllers/orthographic-controller.ts",children:"modules/core/src/controllers/orthographic-controller.ts"})})]})}function d(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,r,o)=>{o.d(r,{R:()=>l,x:()=>i});var n=o(96540);const t={},c=n.createContext(t);function l(e){const r=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(c.Provider,{value:r},e.children)}}}]);