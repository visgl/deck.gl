'use strict'; // code generated by pbf v3.2.1

// Coords ========================================

export const Coords = {};

Coords.read = function (pbf, end) {
    return pbf.readFields(Coords._readField, {value: {}, size: 0}, end);
};
Coords._readField = function (tag, obj, pbf) {
    if (tag === 1)  { var entry = Coords._FieldEntry1.read(pbf, pbf.readVarint() + pbf.pos); obj.value[entry.key] = entry.value; }
    else if (tag === 2) obj.size = pbf.readVarint(true);
};
Coords.write = function (obj, pbf) {
    if (obj.value) for (var i in obj.value) if (Object.prototype.hasOwnProperty.call(obj.value, i)) pbf.writeMessage(1, Coords._FieldEntry1.write, { key: i, value: obj.value[i] });
    if (obj.size) pbf.writeVarintField(2, obj.size);
};

// Coords._FieldEntry1 ========================================

Coords._FieldEntry1 = {};

Coords._FieldEntry1.read = function (pbf, end) {
    return pbf.readFields(Coords._FieldEntry1._readField, {key: "", value: 0}, end);
};
Coords._FieldEntry1._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = pbf.readDouble();
};
Coords._FieldEntry1.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeDoubleField(2, obj.value);
};

// NumericProp ========================================

export const NumericProp = {};

NumericProp.read = function (pbf, end) {
    return pbf.readFields(NumericProp._readField, {value: {}}, end);
};
NumericProp._readField = function (tag, obj, pbf) {
    if (tag === 1)  { var entry = NumericProp._FieldEntry1.read(pbf, pbf.readVarint() + pbf.pos); obj.value[entry.key] = entry.value; }
};
NumericProp.write = function (obj, pbf) {
    if (obj.value) for (var i in obj.value) if (Object.prototype.hasOwnProperty.call(obj.value, i)) pbf.writeMessage(1, NumericProp._FieldEntry1.write, { key: i, value: obj.value[i] });
};

// NumericProp._FieldEntry1 ========================================

NumericProp._FieldEntry1 = {};

NumericProp._FieldEntry1.read = function (pbf, end) {
    return pbf.readFields(NumericProp._FieldEntry1._readField, {key: "", value: 0}, end);
};
NumericProp._FieldEntry1._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = pbf.readDouble();
};
NumericProp._FieldEntry1.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeDoubleField(2, obj.value);
};

// StringProp ========================================

export const StringProp = {};

StringProp.read = function (pbf, end) {
    return pbf.readFields(StringProp._readField, {value: []}, end);
};
StringProp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.value.push(pbf.readString());
};
StringProp.write = function (obj, pbf) {
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeStringField(1, obj.value[i]);
};

// Points ========================================

export const Points = {};

Points.read = function (pbf, end) {
    return pbf.readFields(Points._readField, {positions: null, globalFeatureIds: null, featureIds: null, properties: [], numericProps: {}}, end);
};
Points._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.positions = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.globalFeatureIds = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.featureIds = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.properties.push(Properties.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5)  { var entry = Points._FieldEntry5.read(pbf, pbf.readVarint() + pbf.pos); obj.numericProps[entry.key] = entry.value; }
};
Points.write = function (obj, pbf) {
    if (obj.positions) pbf.writeMessage(1, Coords.write, obj.positions);
    if (obj.globalFeatureIds) pbf.writeMessage(2, Coords.write, obj.globalFeatureIds);
    if (obj.featureIds) pbf.writeMessage(3, Coords.write, obj.featureIds);
    if (obj.properties) for (var i = 0; i < obj.properties.length; i++) pbf.writeMessage(4, Properties.write, obj.properties[i]);
    if (obj.numericProps) for (i in obj.numericProps) if (Object.prototype.hasOwnProperty.call(obj.numericProps, i)) pbf.writeMessage(5, Points._FieldEntry5.write, { key: i, value: obj.numericProps[i] });
};

// Points._FieldEntry5 ========================================

Points._FieldEntry5 = {};

Points._FieldEntry5.read = function (pbf, end) {
    return pbf.readFields(Points._FieldEntry5._readField, {key: "", value: null}, end);
};
Points._FieldEntry5._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = NumericProp.read(pbf, pbf.readVarint() + pbf.pos);
};
Points._FieldEntry5.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, NumericProp.write, obj.value);
};

// Lines ========================================

export const Lines = {};

Lines.read = function (pbf, end) {
    return pbf.readFields(Lines._readField, {positions: null, pathIndices: null, featureIds: null, properties: [], numericProps: {}}, end);
};
Lines._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.positions = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.pathIndices = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.featureIds = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.properties.push(Properties.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5)  { var entry = Lines._FieldEntry5.read(pbf, pbf.readVarint() + pbf.pos); obj.numericProps[entry.key] = entry.value; }
};
Lines.write = function (obj, pbf) {
    if (obj.positions) pbf.writeMessage(1, Coords.write, obj.positions);
    if (obj.pathIndices) pbf.writeMessage(2, Coords.write, obj.pathIndices);
    if (obj.featureIds) pbf.writeMessage(3, Coords.write, obj.featureIds);
    if (obj.properties) for (var i = 0; i < obj.properties.length; i++) pbf.writeMessage(4, Properties.write, obj.properties[i]);
    if (obj.numericProps) for (i in obj.numericProps) if (Object.prototype.hasOwnProperty.call(obj.numericProps, i)) pbf.writeMessage(5, Lines._FieldEntry5.write, { key: i, value: obj.numericProps[i] });
};

// Lines._FieldEntry5 ========================================

Lines._FieldEntry5 = {};

Lines._FieldEntry5.read = function (pbf, end) {
    return pbf.readFields(Lines._FieldEntry5._readField, {key: "", value: null}, end);
};
Lines._FieldEntry5._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = NumericProp.read(pbf, pbf.readVarint() + pbf.pos);
};
Lines._FieldEntry5.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, NumericProp.write, obj.value);
};

// Polygons ========================================

export const Polygons = {};

Polygons.read = function (pbf, end) {
    return pbf.readFields(Polygons._readField, {positions: null, polygonIndices: null, featureIds: null, primitivePolygonIndices: null, properties: [], numericProps: {}}, end);
};
Polygons._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.positions = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.polygonIndices = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.featureIds = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.primitivePolygonIndices = Coords.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.properties.push(Properties.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6)  { var entry = Polygons._FieldEntry6.read(pbf, pbf.readVarint() + pbf.pos); obj.numericProps[entry.key] = entry.value; }
};
Polygons.write = function (obj, pbf) {
    if (obj.positions) pbf.writeMessage(1, Coords.write, obj.positions);
    if (obj.polygonIndices) pbf.writeMessage(2, Coords.write, obj.polygonIndices);
    if (obj.featureIds) pbf.writeMessage(3, Coords.write, obj.featureIds);
    if (obj.primitivePolygonIndices) pbf.writeMessage(4, Coords.write, obj.primitivePolygonIndices);
    if (obj.properties) for (var i = 0; i < obj.properties.length; i++) pbf.writeMessage(5, Properties.write, obj.properties[i]);
    if (obj.numericProps) for (i in obj.numericProps) if (Object.prototype.hasOwnProperty.call(obj.numericProps, i)) pbf.writeMessage(6, Polygons._FieldEntry6.write, { key: i, value: obj.numericProps[i] });
};

// Polygons._FieldEntry6 ========================================

Polygons._FieldEntry6 = {};

Polygons._FieldEntry6.read = function (pbf, end) {
    return pbf.readFields(Polygons._FieldEntry6._readField, {key: "", value: null}, end);
};
Polygons._FieldEntry6._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = NumericProp.read(pbf, pbf.readVarint() + pbf.pos);
};
Polygons._FieldEntry6.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeMessage(2, NumericProp.write, obj.value);
};

// Tile ========================================

export const Tile = {};

Tile.read = function (pbf, end) {
    return pbf.readFields(Tile._readField, {points: null, lines: null, polygons: null}, end);
};
Tile._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.points = Points.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.lines = Lines.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.polygons = Polygons.read(pbf, pbf.readVarint() + pbf.pos);
};
Tile.write = function (obj, pbf) {
    if (obj.points) pbf.writeMessage(1, Points.write, obj.points);
    if (obj.lines) pbf.writeMessage(2, Lines.write, obj.lines);
    if (obj.polygons) pbf.writeMessage(3, Polygons.write, obj.polygons);
};

// Properties ========================================

export const Properties = {};

Properties.read = function (pbf, end) {
    return pbf.readFields(Properties._readField, {data: []}, end);
};
Properties._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.data.push(KeyValueObject.read(pbf, pbf.readVarint() + pbf.pos));
};
Properties.write = function (obj, pbf) {
    if (obj.data) for (var i = 0; i < obj.data.length; i++) pbf.writeMessage(1, KeyValueObject.write, obj.data[i]);
};

// KeyValueObject ========================================

export const KeyValueObject = {};

KeyValueObject.read = function (pbf, end) {
    return pbf.readFields(KeyValueObject._readField, {key: "", value: ""}, end);
};
KeyValueObject._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = pbf.readString();
};
KeyValueObject.write = function (obj, pbf) {
    if (obj.key) pbf.writeStringField(1, obj.key);
    if (obj.value) pbf.writeStringField(2, obj.value);
};
